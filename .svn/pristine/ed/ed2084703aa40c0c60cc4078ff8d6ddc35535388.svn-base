package kr.or.ddit.login.controller;

import java.io.IOException;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.login.dao.LoginDAO;
import kr.or.ddit.login.service.LoginService;
import kr.or.ddit.login.service.SendCertiMessage;
import kr.or.ddit.vo.groupware.EmployeeVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 박민주
 * @since 2023. 11. 7.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * 
 *      <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2023. 11. 7.      박민주       최초작성
 * 2023. 11. 8.		박민주		  비밀번호 찾기 위한 메소드 추가
 * Copyright (c) 2023 by DDIT All right reserved
 *      </pre>
 */

@Controller
@RequestMapping("/login")
@Slf4j
public class LoginController {

	@Inject
	private LoginService service;

	@Inject
	private LoginDAO dao;

	@Inject
	private SendCertiMessage msgService;

	@GetMapping
	public String doGet() {
		return "login/loginForm";
	}

	@GetMapping("findPw")
	public String doGetFindPw() {
		return "login/findPw";
	}

	@PostMapping("loginProcess")
	public String doPost(@Validated @RequestParam("empCd") String empCd, @Validated @RequestParam("empPw") String empPw,
			HttpSession session) {

		EmployeeVO inputData = new EmployeeVO();
		inputData.setEmpCd(empCd);
		inputData.setEmpPw(empPw);

		String viewName = null;
		ServiceResult result = service.authenticate(inputData);
		switch (result) {
		case OK:
			viewName = "redirect:/"; // 웰컴페이지로 이동
			session.setAttribute("authEmployee", inputData);
			log.info("session 정보 : {}", session.getAttribute("authEmployee"));
			break;
		case INVALIDPASSWORD:
			viewName = "redirect:/login";
			session.setAttribute("message", "비밀번호가 일치하지 않습니다.");
			break;
		default:
			viewName = "redirect:/login";
			session.setAttribute("message", "해당하는 직원정보가 존재하지 않습니다.");
			break;
		}
		return viewName;
	}

	@PostMapping("logout")
	public String doPostLogout(HttpSession session, HttpServletResponse resp) throws IOException {
		if (session == null || session.isNew()) {
			// 로그인 하지도 않았는데, 로그아웃 요청 들어왔으므로 400에러(Bad request=잘못된요청) 내보내기
			resp.sendError(400, "잘못된 요청입니다.");
			return null;
		}
		session.invalidate(); // 저장된 데이터 있으면 전부 삭제
		// 세션 만료 후 웰컴페이지로 이동힘.
		return "redirect:/";
	}

	@PostMapping("findPwProcess")
	public String veryfiyEmpInfo(@RequestBody EmployeeVO inputEmployee, Model model) {
		String formatTelNo = formatPhoneNumber(inputEmployee.getEmpTelno());
		inputEmployee.setEmpTelno(formatTelNo); // 010-4032-2635 형태로.

		ServiceResult result = service.authForFindPassword(inputEmployee); // OK 또는 NOTEXTIST

		System.out.println(inputEmployee);
		boolean success = false;

		String message = null;
		if (result.equals(ServiceResult.OK)) { // OK (직원정보가 존재하는) 경우
			// SingleMessageSentResponse sendResult =
			// msgService.sendMessage(inputEmployee.getEmpTelno());

			// 잠시!!! (테스트용)
			String sendResult = "테스트용 결과";

			if (sendResult != null) { // 문자발송 성공한 경우
				success = true;
				message = "인증번호를 발송하였습니다.";
				// 발송 성공한 경우, 해당 직원의 인증번호 컬럼을 update 해줘야함~
				int updateResult = msgService.updateCertiNum(inputEmployee);
				System.out.println("업데이트 결과 : " + updateResult);
			} else { // 문자발송 실패한 경우
				message = "문자발송에 실패하였습니다.";
			}
		} else { // NOTEXIST 인 경우
			message = "일치하는 존재하는 직원정보가 존재하지 않습니다.";
		}
		model.addAttribute("success", success);
		model.addAttribute("message", message);

		return "jsonView";
	}

	private static String formatPhoneNumber(String phoneNumber) {
		System.out.println(phoneNumber.length());
		if (phoneNumber.length() == 11) {
			String formattedNumber = phoneNumber.substring(0, 3) + "-" + phoneNumber.substring(3, 7) + "-"
					+ phoneNumber.substring(7, 11);
			return formattedNumber;
		} else {
			return phoneNumber;
		}
	}

	@PostMapping("checkCertiNum")
	public String checkCertiNum(@RequestBody EmployeeVO inputEmployee, Model model) {
		EmployeeVO saved = dao.selectEmpForAuth(inputEmployee);

		String inputCrifNO = inputEmployee.getEmpCrtfcNo();
		String savedCrifNO = saved.getEmpCrtfcNo();

		String message = "";
		boolean success = false;
		if (inputCrifNO.equals(savedCrifNO)) { // 일치시
			success = true;
		} else { // 불일
			message = "인증번호가 일치하지 않습니다.";
		}
		model.addAttribute("success", success);
		model.addAttribute("message", message);

		return "jsonView";
	}
}